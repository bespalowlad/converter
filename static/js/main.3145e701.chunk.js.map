{"version":3,"sources":["store/currencyReducer.ts","constants/index.ts","store/index.ts","selectors/index.ts","components/CryptoTable/index.tsx","api/index.ts","components/ConverterBlock/index.tsx","components/Header/index.tsx","styles.ts","App.tsx","index.tsx","images/arrow.svg"],"names":["initialState","coins","sortingParam","searchParam","isVisibleProgress","selectedCurrency","amountSelectedCurrency","toggleProgress","payload","type","receiveCoins","selectCurrency","currency","rootReducer","combineReducers","state","action","amount","store","createStore","composeWithDevTools","applyMiddleware","thunk","getSortedCoinsByPrice","createSelector","sortParam","findCoinByString","coin","fullName","toLowerCase","includes","sort","a","b","price","filter","getValueExchangedCurrencies","mapDispatchToProps","fetchCoins","dispatch","axios","get","data","Data","map","name","CoinInfo","Name","FullName","imageUrl","ImageUrl","RAW","USD","PRICE","volume24Hour","VOLUME24HOUR","changeHour","CHANGEHOUR","console","log","changeSortingParam","selectCurrencyHandler","connect","classes","useEffect","TableContainer","component","Paper","elevation","className","progressBox","CircularProgress","color","Table","aria-label","TableHead","TableRow","TableCell","align","onClick","sortable","src","ArrowSvg","pointerDown","alt","TableBody","key","row","scope","currencyImage","cellGreen","cellRed","toFixed","length","Typography","variant","gutterBottom","exchangeCurrencyHandler","paper","inputBox","FormControl","currencyValue","TextField","onChange","e","target","value","id","label","currencyType","InputLabel","Select","labelId","find","MenuItem","outputValue","disabled","searchByString","header","search","InputBase","searchInput","placeholder","IconButton","searchButton","useStyles","makeStyles","theme","createStyles","root","padding","spacing","textAlign","palette","text","secondary","cursor","display","alignItems","width","flex","marginTop","marginBottom","marginRight","height","borderRadius","background","justifyContent","transform","App","Container","maxWidth","Grid","container","item","xs","Header","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3145e701.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport {\r\n    TCoin,\r\n    TToggleProgressAction,\r\n    TReceiveCoinsAction,\r\n    TSortParamsByPrice,\r\n    TChangeSortingParamAction,\r\n    TSearchByStringAction,\r\n    TSelectCurrencyAction,\r\n    TExchangeCurrencyAction\r\n} from '../types'\r\nimport {\r\n    TOGGLE_PROGRESS,\r\n    RECEIVE_COINS,\r\n    CHANGE_SORTING_PARAM,\r\n    SEARCH_BY_STRING,\r\n    SELECT_CURRENCY,\r\n    EXCHANGE_CURRENCY\r\n} from '../constants'\r\nimport { loadCoins } from '../api'\r\n\r\n// type state\r\ntype TcurrencyState = {\r\n    coins: TCoin[],\r\n    sortingParam: TSortParamsByPrice,\r\n    searchParam: string,\r\n    isVisibleProgress: boolean,\r\n    selectedCurrency: TCoin,\r\n    amountSelectedCurrency: number\r\n}\r\n\r\nconst initialState: TcurrencyState = {\r\n    coins: [],\r\n    sortingParam: 'FROM_EXPENSIVE',\r\n    searchParam: '',\r\n    isVisibleProgress: false,\r\n    selectedCurrency: {} as TCoin,\r\n    amountSelectedCurrency: 0\r\n}\r\n\r\n// type action\r\ntype TActionType = TToggleProgressAction | TReceiveCoinsAction | TChangeSortingParamAction | TSearchByStringAction | TSelectCurrencyAction | TExchangeCurrencyAction\r\n\r\nexport const currencyReducer = (state = initialState, action: TActionType): TcurrencyState => {\r\n    switch (action.type) {\r\n        case TOGGLE_PROGRESS:\r\n            return {\r\n                ...state,\r\n                isVisibleProgress: action.payload\r\n            }\r\n\r\n        case RECEIVE_COINS:\r\n            return {\r\n                ...state,\r\n                coins: [...action.payload]\r\n            }\r\n\r\n        case CHANGE_SORTING_PARAM:\r\n            return {\r\n                ...state,\r\n                sortingParam: state.sortingParam === 'FROM_EXPENSIVE' ? 'FROM_CHEAP' : 'FROM_EXPENSIVE'\r\n            }\r\n\r\n        case SEARCH_BY_STRING:\r\n            return {\r\n                ...state,\r\n                searchParam: action.searchParam\r\n            }\r\n\r\n        case SELECT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                selectedCurrency: action.currency\r\n            }\r\n\r\n        case EXCHANGE_CURRENCY:\r\n            return {\r\n                ...state,\r\n                amountSelectedCurrency: action.amount\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creator\r\nexport const toggleProgress = (payload: boolean): TToggleProgressAction => {\r\n    return {\r\n        type: TOGGLE_PROGRESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const receiveCoins = (coins: TCoin[]): TReceiveCoinsAction => {\r\n    return {\r\n        type: RECEIVE_COINS,\r\n        payload: coins\r\n    }\r\n}\r\n\r\nexport const changeSortingParam = (): TChangeSortingParamAction => {\r\n    return {\r\n        type: CHANGE_SORTING_PARAM\r\n    }\r\n}\r\n\r\nexport const searchByString = (searchParam: string): TSearchByStringAction => {\r\n    return {\r\n        type: SEARCH_BY_STRING,\r\n        searchParam\r\n    }\r\n}\r\n\r\nexport const selectCurrency = (currency: TCoin): TSelectCurrencyAction => {\r\n    return {\r\n        type: SELECT_CURRENCY,\r\n        currency\r\n    }\r\n}\r\n\r\nexport const exchangeCurrency = (amount: number): TExchangeCurrencyAction => {\r\n    return {\r\n        type: EXCHANGE_CURRENCY,\r\n        amount\r\n    }\r\n}\r\n\r\n//thunks\r\nexport const fetchCoins = (): ThunkAction<Promise<void>, TcurrencyState, unknown, TActionType> => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleProgress(true))\r\n        const { data } = await loadCoins()\r\n\r\n        const coins: TCoin[] = data.Data.map((coin: any) => {\r\n            const coinItem: TCoin = {\r\n                name: coin.CoinInfo.Name,\r\n                fullName: coin.CoinInfo.FullName,\r\n                imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n                price: coin.RAW.USD.PRICE,\r\n                volume24Hour: coin.RAW.USD.VOLUME24HOUR,\r\n                changeHour: coin.RAW.USD.CHANGEHOUR\r\n            }\r\n\r\n            return coinItem\r\n        })\r\n\r\n        console.log(coins)\r\n        dispatch(toggleProgress(false))\r\n        dispatch(receiveCoins(coins))\r\n        dispatch(selectCurrency(coins[0]))\r\n    }\r\n}","export const TOGGLE_PROGRESS = 'TOGGLE_PROGRESS'\r\n\r\nexport const RECEIVE_COINS = 'ADD_COIN'\r\n\r\nexport const CHANGE_SORTING_PARAM = 'CHANGE_SORTING_PARAM'\r\n\r\nexport const SEARCH_BY_STRING = 'SEARCH_BY_STRING'\r\n\r\nexport const SELECT_CURRENCY = 'SELECT_CURRENCY'\r\n\r\nexport const EXCHANGE_CURRENCY = 'EXCHANGE_CURRENCY'","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk'\r\nimport { currencyReducer } from './currencyReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    currency: currencyReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport type TRootState = ReturnType<typeof rootReducer>","import { createSelector } from 'reselect'\r\n\r\nimport { TRootState } from '../store'\r\nimport { TCoin, TSortParamsByPrice } from '../types'\r\nimport { selectCurrency } from '../store/currencyReducer'\r\n\r\nconst getCoins = (state: TRootState) => state.currency.coins\r\nconst getSortingParam = (state: TRootState) => state.currency.sortingParam\r\nconst getSearchParam = (state: TRootState) => state.currency.searchParam\r\n\r\nexport const getSortedCoinsByPrice = createSelector(\r\n    [getCoins, getSortingParam, getSearchParam],\r\n    (coins: TCoin[], sortParam: TSortParamsByPrice, searchParam: string) => {\r\n\r\n        const findCoinByString = (coin: TCoin): boolean => coin.fullName.toLowerCase().includes(searchParam.toLowerCase())\r\n\r\n        switch (sortParam) {\r\n            case 'FROM_EXPENSIVE':\r\n                return coins\r\n                    .sort((a: TCoin, b: TCoin): number => {\r\n                        if (a.price > b.price) {\r\n                            return 1;\r\n                        }\r\n\r\n                        if (a.price < b.price) {\r\n                            return -1;\r\n                        }\r\n\r\n                        return 0;\r\n                    })\r\n                    .filter(coin => findCoinByString(coin))\r\n\r\n            case 'FROM_CHEAP':\r\n                return coins\r\n                    .sort((a: TCoin, b: TCoin): number => {\r\n                        if (a.price > b.price) {\r\n                            return -1;\r\n                        }\r\n\r\n                        if (a.price < b.price) {\r\n                            return 1;\r\n                        }\r\n\r\n                        return 0;\r\n                    })\r\n                    .filter(coin => findCoinByString(coin))\r\n\r\n            default:\r\n                return coins.filter(coin => findCoinByString(coin))\r\n        }\r\n    }\r\n)\r\n\r\nconst getAmountSelectedCurrency = (state: TRootState) => state.currency.amountSelectedCurrency\r\nconst getSelectedCurrency = (state: TRootState) => state.currency.selectedCurrency\r\n\r\nexport const getValueExchangedCurrencies = createSelector(\r\n    [getAmountSelectedCurrency, getSelectedCurrency],\r\n    (amount: number, selectedCurrency: TCoin) => {\r\n        return amount * selectedCurrency.price\r\n    }\r\n)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { TCoin, TSortParamsByPrice, TChangeSortingParamAction, TSelectCurrencyAction } from '../../types'\r\nimport { TRootState } from '../../store'\r\nimport { fetchCoins, changeSortingParam, selectCurrency } from '../../store/currencyReducer'\r\nimport { getSortedCoinsByPrice } from '../../selectors'\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ArrowSvg from '../../images/arrow.svg'\r\n\r\ntype TStateProps = {\r\n    coins: TCoin[],\r\n    sortingParam: TSortParamsByPrice,\r\n    searchParam: string,\r\n    isVisibleProgress: boolean\r\n}\r\n\r\ntype TDispatchProps = {\r\n    fetchCoins: () => void\r\n    changeSortingParam: () => TChangeSortingParamAction,\r\n    selectCurrencyHandler: (currency: TCoin) => TSelectCurrencyAction\r\n}\r\n\r\ntype TOwnProps = {\r\n    classes: any\r\n}\r\n\r\ntype TProps = TStateProps & TDispatchProps & TOwnProps\r\n\r\n\r\nconst mapStateToProps = (state: TRootState) => ({\r\n    coins: getSortedCoinsByPrice(state),\r\n    sortingParam: state.currency.sortingParam,\r\n    searchParam: state.currency.searchParam,\r\n    isVisibleProgress: state.currency.isVisibleProgress\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    fetchCoins,\r\n    changeSortingParam,\r\n    selectCurrencyHandler: selectCurrency\r\n}\r\n\r\nconst CryptoTable: React.FC<TProps> = ({ coins, sortingParam, searchParam, isVisibleProgress, fetchCoins, changeSortingParam, selectCurrencyHandler, classes }) => {\r\n    useEffect(() => {\r\n        fetchCoins()\r\n\r\n        // const interval = window.setInterval(() => {\r\n        //     fetchCoins()\r\n        // }, 5000)\r\n\r\n        // return () => window.clearInterval(interval)\r\n    }, [])\r\n\r\n    return <TableContainer component={Paper} elevation={3}>\r\n        {isVisibleProgress ?\r\n            <div className={classes.progressBox}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </div> :\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell></TableCell>\r\n                        <TableCell align=\"left\">FullName</TableCell>\r\n                        <TableCell align=\"left\">Name</TableCell>\r\n                        <TableCell onClick={changeSortingParam} className={classes.sortable} align=\"left\">\r\n                            Price\r\n                        <img src={ArrowSvg} className={sortingParam === 'FROM_EXPENSIVE' ? classes.pointerDown : ''} alt=\"Arrow\" />\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">Volume24hour</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {coins.map((coin) => (\r\n                        <TableRow onClick={() => selectCurrencyHandler(coin)} key={coin.name} className={classes.row}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                <img src={coin.imageUrl} className={classes.currencyImage} alt=\"Coin icon\" />\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">{coin.name}</TableCell>\r\n                            <TableCell align=\"left\">{coin.fullName}</TableCell>\r\n                            <TableCell className={coin.changeHour > 0 ? classes.cellGreen : classes.cellRed} align=\"left\">\r\n                                ${(coin.price)}\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">${(coin.volume24Hour).toFixed(5)}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n\r\n                    {searchParam && coins.length === 0 && <TableRow>\r\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                            <Typography variant=\"h5\" gutterBottom>No such currency found</Typography>\r\n                        </TableCell>\r\n                    </TableRow>}\r\n                </TableBody>\r\n            </Table>}\r\n    </TableContainer>\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CryptoTable)\r\n","import axios from 'axios'\r\n\r\nconst API_KEY: string = `3a06d412960b4f017361f492d59765a72c8cd3266d7e0ac360df95b1d3aae70d`;\r\n\r\nexport const loadCoins = () => {\r\n    return axios.get(`https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD&api_key=${API_KEY}`)\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { TRootState } from '../../store'\r\nimport { TCoin, TSelectCurrencyAction, TExchangeCurrencyAction } from '../../types'\r\nimport { selectCurrency, exchangeCurrency } from '../../store/currencyReducer'\r\nimport { getValueExchangedCurrencies } from '../../selectors'\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\ntype TStateProps = {\r\n    coins: TCoin[],\r\n    selectedCurrency: TCoin,\r\n    amountSelectedCurrency: number\r\n}\r\n\r\ntype TDispatchProps = {\r\n    selectCurrencyHandler: (currency: TCoin) => TSelectCurrencyAction,\r\n    exchangeCurrencyHandler: (amount: number) => TExchangeCurrencyAction\r\n}\r\n\r\ntype TOwnProps = {\r\n    classes: any\r\n}\r\n\r\nconst mapStateToProps = (state: TRootState) => ({\r\n    coins: state.currency.coins,\r\n    selectedCurrency: state.currency.selectedCurrency,\r\n    amountSelectedCurrency: getValueExchangedCurrencies(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    selectCurrencyHandler: selectCurrency,\r\n    exchangeCurrencyHandler: exchangeCurrency\r\n}\r\n\r\ntype TProps = TStateProps & TDispatchProps & TOwnProps\r\n\r\nconst ConverterBlock: React.FC<TProps> = ({ coins, selectedCurrency, selectCurrencyHandler, exchangeCurrencyHandler, amountSelectedCurrency, classes }) => {\r\n\r\n    const changeCurrencyHandler = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n        const coin: TCoin | undefined = coins.find((coin: TCoin) => coin.name === e.target.value)\r\n\r\n        if (coin) {\r\n            selectCurrencyHandler(coin)\r\n        }\r\n    }\r\n\r\n    const changeAmountHandler = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n        const amount: number = e.target.value as number\r\n        exchangeCurrencyHandler(amount)\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper} elevation={3}>\r\n            <div className={classes.inputBox}>\r\n                <FormControl className={classes.currencyValue}>\r\n                    <TextField onChange={changeAmountHandler} id=\"standard-basic\" label=\"Сумма\" />\r\n                </FormControl>\r\n\r\n                <FormControl className={classes.currencyType}>\r\n                    <InputLabel id=\"demo-simple-select-label\">Валюта</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        onChange={changeCurrencyHandler}\r\n                        value={selectedCurrency.name ? selectedCurrency.name : ''}\r\n                    >\r\n                        {coins.map((coin) => (\r\n                            <MenuItem key={coin.name} value={coin.name}>{coin.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <div className={classes.inputBox}>\r\n                <FormControl className={classes.outputValue}>\r\n                    <TextField value={amountSelectedCurrency} disabled id=\"filled-disabled\" label=\"Сумма\" variant=\"filled\" />\r\n                </FormControl>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConverterBlock)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { searchByString } from '../../store/currencyReducer'\r\nimport { TRootState } from '../../store'\r\nimport { TSearchByStringAction } from '../../types'\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\ntype TStateProps = {\r\n    searchParam: string\r\n}\r\n\r\ntype TDispatchProps = {\r\n    searchByString: (searchParam: string) => TSearchByStringAction\r\n}\r\n\r\ntype TOwnProps = {\r\n    classes: any\r\n}\r\n\r\ntype TProps = TStateProps & TDispatchProps & TOwnProps\r\n\r\n\r\nconst mapStateToProps = (state: TRootState) => ({\r\n    searchParam: state.currency.searchParam\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    searchByString\r\n}\r\n\r\nconst HeaderBlock: React.FC<TProps> = ({ searchParam, searchByString, classes }) => {\r\n    return (\r\n        <Paper elevation={3} className={classes.header} >\r\n            <Paper component=\"form\" className={classes.search} elevation={1} >\r\n                <InputBase value={searchParam} onChange={e => searchByString(e.target.value)} className={classes.searchInput} placeholder=\"Search by fullname...\" />\r\n                <IconButton type=\"button\" className={classes.searchButton} >\r\n                    <SearchIcon />\r\n                </IconButton>\r\n            </Paper>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderBlock)","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: theme.spacing(10),\r\n        },\r\n\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n\r\n        row: {\r\n            cursor: 'pointer'\r\n        },\r\n\r\n        header: {\r\n            padding: 40\r\n        },\r\n\r\n        search: {\r\n            padding: '2px 4px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            width: 400,\r\n        },\r\n\r\n        searchInput: {\r\n            flex: 1\r\n        },\r\n\r\n        searchButton: {\r\n            padding: 10\r\n        },\r\n\r\n        inputBox: {\r\n            marginTop: 20,\r\n            marginBottom: 20\r\n        },\r\n\r\n        currencyValue: {\r\n            width: 'calc(70% - 15px)',\r\n            marginRight: 15\r\n        },\r\n\r\n        outputValue: {\r\n            width: '100%'\r\n        },\r\n\r\n        currencyType: {\r\n            width: '30%'\r\n        },\r\n\r\n        currencyImage: {\r\n            width: 18,\r\n            height: 18,\r\n            borderRadius: '50%'\r\n        },\r\n\r\n        cellGreen: {\r\n            background: '#c4feb5'\r\n        },\r\n\r\n        cellRed: {\r\n            background: '#ffb1b1'\r\n        },\r\n\r\n        sortable: {\r\n            cursor: 'pointer',\r\n            display: 'flex',\r\n            justifyContent: 'space-between'\r\n        },\r\n\r\n        pointerDown: {\r\n            transform: 'scale(-1, -1)'\r\n        },\r\n\r\n        progressBox: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: 20\r\n        }\r\n    }),\r\n);\r\n\r\nexport default useStyles","import React from 'react';\nimport { CryptoTableContainer, ConverterBlock, HeaderBlock } from './components'\nimport useStyles from './styles'\n\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid';\n\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root} maxWidth=\"lg\">\n      <div className=\"App\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <HeaderBlock classes={classes} />\n          </Grid>\n          <Grid item xs={8}>\n            <CryptoTableContainer classes={classes} />\n          </Grid>\n          <Grid item xs={4}>\n            <ConverterBlock classes={classes} />\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport { store } from './store'\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/arrow.e000943e.svg\";"],"sourceRoot":""}